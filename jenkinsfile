pipeline {
    agent any
    tools {
        nodejs 'Nodejs22-6-0'
    }
    environment {
      //  PATH = "${tool 'SonarQube_scaner'}/bin:${env.PATH}"
        DOCKER_IMAGE  = "tahseen176/solar:latest"
    }

    stages {
        stage('Installing Dependencies') {
            steps {
                sh 'npm install --no-audit'
            }
        }
        
        stage('NPM Dependency Check Parallel') {
            parallel {
                stage('NPM Dependency Check') {
                    steps {
                        sh 'npm audit --audit-level=critical'
                    }
                }

                /* Uncomment to enable OWASP Dependency Check
                stage('OWASP Dependency Check') {
                    steps {
                        dependencyCheck additionalArguments: '''--format ALL
                        --scan ./
                        --prettyPrint''', odcInstallation: 'OWASP'
                    }
                } */
            }
        }

        stage('Code Coverage') {
            steps {
                catchError(buildResult: 'SUCCESS', message: 'Oops! We will fix it later', stageResult: 'UNSTABLE') {
                    sh 'npm run coverage'
                }
                publishHTML([
                    allowMissing: true, 
                    alwaysLinkToLastBuild: true, 
                    keepAll: true, 
                    reportDir: 'coverage/lcov-report', 
                    reportFiles: 'index.html', 
                    reportName: 'Code Coverage Report', 
                    useWrapperFileDirectly: true
                ])
            }
        }

        /* Uncomment to enable SonarQube Analysis
        stage('SonarQube Static Analysis') {
            steps {
                withSonarQubeEnv('Sonar') {
                    sh '''
                    sonar-scanner \
                        -Dsonar.projectKey=solar-sonar \
                        -Dsonar.sources=. \
                        -Dsonar.javascript.lcov.reportPaths=./coverage/lcov.info \
                        -Dsonar.issuesReport.console.enable=true
                    '''
                }
            }
        }
        */

        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                }
            }
        }

        stage('Docker Build') {
            steps {
                sh '''
                docker build -t solar:latest .
                docker tag solar:latest $DOCKER_IMAGE
                '''
            }
        }

        stage('Test') {
            steps {
                echo 'Testing the app'
            }
        }

        stage('Deploy') {
            steps {
                echo 'Deploying the app'
            }
        }
    }
}
