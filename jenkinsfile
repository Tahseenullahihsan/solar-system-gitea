pipeline {
    agent any
    tools {
        nodejs 'Nodejs22-6-0'
    }
    
        
    environment {
        MONGO_URI = credentials('MONGO_URI')          
        MONGO_USERNAME = credentials('MONGO_USERNAME') 
        MONGO_PASSWORD = credentials('MONGO_PASSWORD') 
        DOCKER_IMAGE = "tahseen176/solar:latest"
    }

    stages {
        stage('Installing Dependencies') {
            steps {
                sh 'npm install --no-audit'
            }
        }
        stage('Debug Env Variables') {
    steps {
        sh 'echo "MONGO_URI=$MONGO_URI"'
        sh 'echo "MONGO_USERNAME=$MONGO_USERNAME"'
        sh 'echo "MONGO_PASSWORD=$MONGO_PASSWORD"'
    }
}

        
        stage('NPM Dependency Check Parallel') {
            parallel {
                stage('NPM Dependency Check') {
                    steps {
                        sh 'npm audit --audit-level=critical'
                    }
                }
            }
        }

        stage('Code Coverage') {
            steps {
                catchError(buildResult: 'SUCCESS', message: 'Oops! We will fix it later', stageResult: 'UNSTABLE') {
                    sh 'npm run coverage'
                }
                publishHTML([
                    allowMissing: true, 
                    alwaysLinkToLastBuild: true, 
                    keepAll: true, 
                    reportDir: 'coverage/lcov-report', 
                    reportFiles: 'index.html', 
                    reportName: 'Code Coverage Report', 
                    useWrapperFileDirectly: true
                ])
            }
        }

        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                }
            }
        }

        stage('Docker Build') {
            steps {
                sh '''
                docker build -t solar:latest .
                docker tag solar:latest $DOCKER_IMAGE
                '''
            }
        }

        stage('Trivy Vulnerability Scanner') {
            steps {
                sh ''' 
                trivy image $DOCKER_IMAGE \
                    --severity LOW,MEDIUM,HIGH \
                    --exit-code 0 \
                    --quiet \
                    --format json -o trivy-image-MEDIUM-results.json

                trivy image $DOCKER_IMAGE \
                    --severity CRITICAL \
                    --exit-code 1 \
                    --quiet \
                    --format json -o trivy-image-CRITICAL-results.json
                '''
            }
            post {
                 always {
                    sh '''
                        trivy convert \
                            --format template --template "@/usr/local/share/trivy/templates/html.tpl" \
                            --output trivy-image-MEDIUM-results.html trivy-image-MEDIUM-results.json 

                        trivy convert \
                            --format template --template "@/usr/local/share/trivy/templates/html.tpl" \
                            --output trivy-image-CRITICAL-results.html trivy-image-CRITICAL-results.json

                        trivy convert \
                            --format template --template "@/usr/local/share/trivy/templates/junit.tpl" \
                            --output trivy-image-MEDIUM-results.xml  trivy-image-MEDIUM-results.json 

                        trivy convert \
                            --format template --template "@/usr/local/share/trivy/templates/junit.tpl" \
                            --output trivy-image-CRITICAL-results.xml trivy-image-CRITICAL-results.json          
                    '''
                }
            }
        }

     stage("push the dokcer iamge") {
            steps {
                sh '''
                docker push $DOCKER_IMAGE
                '''
            }
        }

        stage('Test') {
            steps {
                echo 'Testing the app'
            }
        }
         
 stage('Deploy - AWS EC2') {
    steps {
        
        script {
            sshagent(['jwnkins_ssh']) {
                sh '''
                    ssh -i /var/lib/jenkins/.ssh/jenkins.pem -o StrictHostKeyChecking=no ec2-user@54.90.141.116 "
                        echo 'Stopping and removing existing container if any...'
                        if sudo docker ps -a | grep -q 'solar'; then
                            echo 'Container found. Stopping...'
                            sudo docker stop solar && sudo docker rm solar
                            echo 'Container stopped and removed.'
                        fi
                        sudo docker run -d -p 3000:3000 \
                       -e MONGO_URI="${MONGO_URI}" \
                       -e MONGO_USERNAME="${MONGO_USERNAME}" \
                       -e MONGO_PASSWORD="${MONGO_PASSWORD}" \
                        tahseen176/solar:latest
                            
                    "
                '''
            }
        }
    }
}

            
        }

       
    }

